const SCRIPT_URL = "https://script.google.com/macros/s/AKfycbyFlBN5_L1dr0fncI39EZuMoxnBqtW03g1--BkU9IosROoSxgqqRlTFFFrdp7GZN22M/exec";

document.addEventListener('DOMContentLoaded', function() {
    const tg = window.Telegram.WebApp;
    tg.expand();

    const loader = document.getElementById('loader');
    const myTerritoryList = document.getElementById('my-territory-list');
    const freeTerritoryList = document.getElementById('territory-list');
    const freeTerritoriesTitle = document.getElementById('free-territories-title');
    
    let allTerritories = []; // –¢–µ–ø–µ—Ä —Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –í–°–Ü —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
    const userId = tg.initDataUnsafe.user.id;

    // --- –õ–û–ì–Ü–ö–ê –î–õ–Ø –í–ö–õ–ê–î–û–ö ---
    // ... (–±–µ–∑ –∑–º—ñ–Ω) ...

    // --- –õ–û–ì–Ü–ö–ê –î–õ–Ø –§–Ü–õ–¨–¢–†–Ü–í ---
    // ... (–±–µ–∑ –∑–º—ñ–Ω) ...

    // --- –§–£–ù–ö–¶–Ü–á –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø ---
    function displayMyTerritories() {
        myTerritoryList.innerHTML = '';
        const myTerritories = allTerritories.filter(t => t.assignee_id == userId);

        if (myTerritories.length === 0) {
            myTerritoryList.innerHTML = '<p>–ù–∞ –¥–∞–Ω–∏–π —á–∞—Å –≤–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó.</p>';
            return;
        }
        myTerritories.forEach(t => {
            const item = document.createElement('div');
            item.className = 'territory-item';
            const photoBlock = t.photoUrl ? `<img class="territory-photo" src="${t.photoUrl}" alt="–§–æ—Ç–æ">` : `<div class="placeholder-photo">–ù–µ–º–∞—î —Ñ–æ—Ç–æ</div>`;
            item.innerHTML = `
                <div class="territory-title">üìç ${t.id}. ${t.name}</div>
                <div class="territory-content">
                    ${photoBlock}
                    <button class="btn-return" data-id="${t.id}">‚Ü©Ô∏è –ó–¥–∞—Ç–∏</button>
                </div>
            `;
            myTerritoryList.appendChild(item);
        });
        addReturnListeners();
    }

    function isAvailable(territory) {
        if (territory.status === '–≤—ñ–ª—å–Ω–∞') return true;
        if (territory.status === '–ø–æ–≤–µ—Ä–Ω–µ–Ω–∞') {
            if (!territory.date_completed) return true; // –Ø–∫—â–æ –¥–∞—Ç–∏ –Ω–µ–º–∞—î, –≤–≤–∞–∂–∞—î–º–æ –≤—ñ–ª—å–Ω–æ—é
            const completedDate = new Date(territory.date_completed);
            const oneMonthAgo = new Date();
            oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
            return completedDate < oneMonthAgo;
        }
        return false;
    }

    function displayFreeTerritories(filter) {
        freeTerritoryList.innerHTML = '';
        freeTerritoriesTitle.style.display = 'block';
        
        const filtered = allTerritories.filter(t => t.type === filter && isAvailable(t));

        if (filtered.length === 0) {
            freeTerritoryList.innerHTML = '<p>–í—ñ–ª—å–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π —Ü—å–æ–≥–æ —Ç–∏–ø—É –Ω–µ–º–∞—î.</p>';
            return;
        }

        filtered.forEach(t => {
            // ... (–∫–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –±–µ–∑ –∑–º—ñ–Ω) ...
        });
        addBookingListeners();
    }

    // --- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ---
    function addReturnListeners() {
        document.querySelectorAll('.btn-return').forEach(button => {
            button.addEventListener('click', function() {
                const territoryId = this.dataset.id;
                tg.showConfirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–¥–∞—Ç–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é ${territoryId}?`, (isConfirmed) => {
                    if (isConfirmed) {
                        returnTerritory(territoryId, this);
                    }
                });
            });
        });
    }

    function addBookingListeners() { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }

    // --- –§–£–ù–ö–¶–Ü–á –ó–í'–Ø–ó–ö–£ –ó API ---
    function returnTerritory(territoryId, buttonElement) {
        tg.MainButton.setText("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...").show();
        fetch(`${SCRIPT_URL}?action=returnTerritory&territoryId=${territoryId}&userId=${userId}`)
            .then(response => response.json())
            .then(result => {
                tg.MainButton.hide();
                if (result.ok) {
                    tg.showAlert(result.message);
                    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –æ–±–∏–¥–≤–∞ —Å–ø–∏—Å–∫–∏
                    fetchAllTerritories();
                } else {
                    tg.showAlert(result.message);
                }
            })
            .catch(error => {
                tg.MainButton.hide();
                tg.showAlert(`–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            });
    }

    function bookTerritory(territoryId, buttonElement) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }

    // --- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ---
    function fetchAllTerritories() {
        loader.style.display = 'block';
        myTerritoryList.innerHTML = '';
        freeTerritoryList.innerHTML = '';

        fetch(SCRIPT_URL)
            .then(response => response.json())
            .then(data => {
                loader.style.display = 'none';
                if (data.ok) {
                    allTerritories = data.territories;
                    displayMyTerritories(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∫–ª–∞–¥–∫—É "–ú–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó"
                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∫–ª–∞–¥–∫—É "–û–±—Ä–∞—Ç–∏" (—è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä)
                    const activeFilter = document.querySelector('.filter-btn.active');
                    if (activeFilter) {
                        displayFreeTerritories(activeFilter.dataset.filter);
                    }
                } else {
                    document.body.innerHTML = `<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${data.error}</p>`;
                }
            });
    }
    
    fetchAllTerritories();
});
document.addEventListener('DOMContentLoaded', function() {
    const tg = window.Telegram.WebApp;
    tg.expand();

    const loader = document.getElementById('loader');
    const myTerritoryList = document.getElementById('my-territory-list');
    const freeTerritoryList = document.getElementById('territory-list');
    const freeTerritoriesTitle = document.getElementById('free-territories-title');
    
    let allFreeTerritories = [];
    const userId = tg.initDataUnsafe.user.id;

    // --- –õ–û–ì–Ü–ö–ê –î–õ–Ø –í–ö–õ–ê–î–û–ö ---
    const tabs = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(item => item.classList.remove('active'));
            tab.classList.add('active');
            const targetTab = document.getElementById(tab.dataset.tab);
            tabContents.forEach(content => content.classList.remove('active'));
            targetTab.classList.add('active');
        });
    });

    // --- –õ–û–ì–Ü–ö–ê –î–õ–Ø –§–Ü–õ–¨–¢–†–Ü–í ---
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            const filter = button.dataset.filter;
            displayFreeTerritories(filter);
        });
    });

    // --- –§–£–ù–ö–¶–Ü–á –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø ---
    function displayMyTerritories(territories) {
        myTerritoryList.innerHTML = '';
        if (territories.length === 0) {
            myTerritoryList.innerHTML = '<p>–ù–∞ –¥–∞–Ω–∏–π —á–∞—Å –≤–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó.</p>';
            return;
        }
        territories.forEach(t => {
            const item = document.createElement('div');
            item.className = 'territory-item';
            item.innerHTML = `<div class="territory-title">üìç ${t.id}. ${t.name}</div>`;
            myTerritoryList.appendChild(item);
        });
    }

    function displayFreeTerritories(filter) {
        freeTerritoryList.innerHTML = '';
        freeTerritoriesTitle.style.display = 'block';
        const filtered = allFreeTerritories.filter(t => t.type === filter);

        if (filtered.length === 0) {
            freeTerritoryList.innerHTML = '<p>–í—ñ–ª—å–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π —Ü—å–æ–≥–æ —Ç–∏–ø—É –Ω–µ–º–∞—î.</p>';
            return;
        }

        filtered.forEach(t => {
            const item = document.createElement('div');
            item.className = 'territory-item';
            const photoBlock = t.photoUrl ? `<img class="territory-photo" src="${t.photoUrl}" alt="–§–æ—Ç–æ">` : `<div class="placeholder-photo">–ù–µ–º–∞—î —Ñ–æ—Ç–æ</div>`;
            item.innerHTML = `
                <div class="territory-title">üìç ${t.id}. ${t.name}</div>
                <div class="territory-content">
                    ${photoBlock}
                    <button class="btn-book" data-id="${t.id}">‚úÖ –û–±—Ä–∞—Ç–∏</button>
                </div>
            `;
            freeTerritoryList.appendChild(item);
        });
        addBookingListeners();
    }

    function addBookingListeners() {
        document.querySelectorAll('.btn-book').forEach(button => {
            button.addEventListener('click', function() {
                const territoryId = this.dataset.id;
                tg.showConfirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∑—è—Ç–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é ${territoryId}?`, (isConfirmed) => {
                    if (isConfirmed) {
                        bookTerritory(territoryId, this);
                    }
                });
            });
        });
    }

    function bookTerritory(territoryId, buttonElement) {
        tg.MainButton.setText("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è...").show();
        fetch(`${SCRIPT_URL}?action=bookTerritory&territoryId=${territoryId}&userId=${userId}`)
            .then(response => response.json())
            .then(result => {
                tg.MainButton.hide();
                if (result.ok) {
                    tg.showAlert(result.message);
                    buttonElement.closest('.territory-item').classList.add('booked');
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
                    fetchMyTerritories();
                } else {
                    tg.showAlert(result.message);
                }
            })
            .catch(error => {
                tg.MainButton.hide();
                tg.showAlert(`–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            });
    }

    // --- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ---
    function fetchMyTerritories() {
        fetch(`${SCRIPT_URL}?action=getMyTerritories&userId=${userId}`)
            .then(response => response.json())
            .then(data => {
                if (data.ok) {
                    displayMyTerritories(data.territories);
                }
            });
    }

    function fetchAllFreeTerritories() {
        fetch(SCRIPT_URL)
            .then(response => response.json())
            .then(data => {
                loader.style.display = 'none';
                if (data.ok) {
                    allFreeTerritories = data.territories;
                } else {
                    document.body.innerHTML = `<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${data.error}</p>`;
                }
            });
    }

    loader.style.display = 'block';
    fetchMyTerritories();
    fetchAllFreeTerritories();
});